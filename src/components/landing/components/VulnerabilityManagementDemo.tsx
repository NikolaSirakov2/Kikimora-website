import React, {
  forwardRef,
  useRef,
  useEffect,
  useId,
  useState,
  useCallback,
  useMemo,
} from "react";
import { motion } from "framer-motion";

// Utility function for class name concatenation
const cn = (...classes: (string | undefined | null | false)[]): string => {
  return classes.filter(Boolean).join(" ");
};

// Types for better type safety
interface AnimatedBeamProps {
  className?: string;
  containerRef: React.RefObject<HTMLElement>;
  fromRef: React.RefObject<HTMLElement>;
  toRef: React.RefObject<HTMLElement>;
  curvature?: number;
  reverse?: boolean;
  duration?: number;
  delay?: number;
  pathColor?: string;
  pathWidth?: number;
  pathOpacity?: number;
  gradientStartColor?: string;
  gradientStopColor?: string;
  startXOffset?: number;
  startYOffset?: number;
  endXOffset?: number;
  endYOffset?: number;
}

interface IconContainerProps {
  className?: string;
  children?: React.ReactNode;
}

interface FeatureCardProps {
  features: string[];
}

// AnimatedBeam component with proper cleanup and optimization
const AnimatedBeam: React.FC<AnimatedBeamProps> = ({
  className = "",
  containerRef,
  fromRef,
  toRef,
  curvature = 0,
  reverse = false,
  duration = 5,
  delay = 0,
  pathColor = "rgb(156, 163, 175)",
  pathWidth = 2,
  pathOpacity = 0.2,
  gradientStartColor = "#3B82F6",
  gradientStopColor = "#8B5CF6",
  startXOffset = 0,
  startYOffset = 0,
  endXOffset = 0,
  endYOffset = 0,
}) => {
  const id = useId();
  const [pathD, setPathD] = useState("");
  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });

  const updatePath = useCallback(() => {
    if (containerRef.current && fromRef.current && toRef.current) {
      const containerRect = containerRef.current.getBoundingClientRect();
      const rectA = fromRef.current.getBoundingClientRect();
      const rectB = toRef.current.getBoundingClientRect();

      const svgWidth = containerRect.width;
      const svgHeight = containerRect.height;
      setSvgDimensions({ width: svgWidth, height: svgHeight });

      const startX =
        rectA.left - containerRect.left + rectA.width / 2 + startXOffset;
      const startY =
        rectA.top - containerRect.top + rectA.height / 2 + startYOffset;
      const endX =
        rectB.left - containerRect.left + rectB.width / 2 + endXOffset;
      const endY =
        rectB.top - containerRect.top + rectB.height / 2 + endYOffset;

      const controlPointX = (startX + endX) / 2;
      const controlPointY = startY - curvature;

      const d = `M ${startX},${startY} Q ${controlPointX},${controlPointY} ${endX},${endY}`;
      setPathD(d);
    }
  }, [
    containerRef,
    fromRef,
    toRef,
    curvature,
    startXOffset,
    startYOffset,
    endXOffset,
    endYOffset,
  ]);

  useEffect(() => {
    updatePath();

    const containerElement = containerRef.current;
    const resizeObserver = new ResizeObserver(updatePath);
    if (containerElement) {
      resizeObserver.observe(containerElement);
    }
    window.addEventListener("resize", updatePath);

    return () => {
      if (containerElement) {
        resizeObserver.unobserve(containerElement);
      }
      window.removeEventListener("resize", updatePath);
    };
  }, [updatePath, containerRef]);

  const gradientCoordinates = useMemo(
    () =>
      reverse
        ? { x1: ["90%", "-10%"], x2: ["100%", "0%"] }
        : { x1: ["10%", "110%"], x2: ["0%", "100%"] },
    [reverse]
  );

  return (
    <svg
      fill="none"
      width={svgDimensions.width}
      height={svgDimensions.height}
      xmlns="http://www.w3.org/2000/svg"
      className={cn("pointer-events-none absolute left-0 top-0", className)}
      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}
    >
      <path
        d={pathD}
        stroke={pathColor}
        strokeWidth={pathWidth}
        strokeOpacity={pathOpacity}
        strokeLinecap="round"
      />
      <path
        d={pathD}
        strokeWidth={pathWidth}
        stroke={`url(#${id})`}
        strokeOpacity="1"
        strokeLinecap="round"
      />
      <defs>
        <motion.linearGradient
          id={id}
          className="transform-gpu"
          gradientUnits="userSpaceOnUse"
          initial={{ x1: "0%", x2: "0%" }}
          animate={{ x1: gradientCoordinates.x1, x2: gradientCoordinates.x2 }}
          transition={{
            delay,
            duration,
            ease: [0.16, 1, 0.3, 1],
            repeat: Infinity,
            repeatDelay: 0,
          }}
        >
          <stop stopColor={gradientStartColor} stopOpacity="0"></stop>
          <stop stopColor={gradientStartColor}></stop>
          <stop offset="32.5%" stopColor={gradientStopColor}></stop>
          <stop
            offset="100%"
            stopColor={gradientStopColor}
            stopOpacity="0"
          ></stop>
        </motion.linearGradient>
      </defs>
    </svg>
  );
};

// IconContainer component with proper typing
const IconContainer = forwardRef<HTMLDivElement, IconContainerProps>(
  ({ className, children }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "z-10 flex h-20 w-32 items-center justify-center rounded-lg border-2 border-gray-700/30 bg-white p-3 shadow-lg transition-all duration-300 hover:shadow-xl",
          className
        )}
      >
        {children}
      </div>
    );
  }
);

IconContainer.displayName = "IconContainer";

// ListItem component with proper styling
const ListItem: React.FC<{ text: string }> = ({ text }) => {
  return (
    <li className="flex items-start text-left text-sm text-gray-600">
      <span className="mr-2 mt-0.5 flex-shrink-0 text-blue-600">
        <svg
          width={16}
          height={16}
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className="sm:h-5 sm:w-5"
        >
          <path
            d="M18 9.5L11.5312 2.9375C11.25 2.65625 10.8125 2.65625 10.5312 2.9375C10.25 3.21875 10.25 3.65625 10.5312 3.9375L15.7812 9.28125H2.5C2.125 9.28125 1.8125 9.59375 1.8125 9.96875C1.8125 10.3438 2.125 10.6875 2.5 10.6875H15.8437L10.5312 16.0938C10.25 16.375 10.25 16.8125 10.5312 17.0938C10.6562 17.2188 10.8437 17.2812 11.0312 17.2812C11.2187 17.2812 11.4062 17.2188 11.5312 17.0625L18 10.5C18.2812 10.2187 18.2812 9.78125 18 9.5Z"
            fill="currentColor"
          />
        </svg>
      </span>
      <span className="flex-1">{text}</span>
    </li>
  );
};

// FeatureCard component with proper typing
const FeatureCard = forwardRef<HTMLDivElement, FeatureCardProps>(
  ({ features }, ref) => {
    return (
      <div
        ref={ref}
        className="z-10 w-full max-w-xs rounded-lg border border-gray-200 bg-white p-6 shadow-lg transition-all duration-300 hover:shadow-xl"
      >
        <ul className="flex flex-col space-y-3">
          {features.map((feature, index) => (
            <ListItem key={index} text={feature} />
          ))}
        </ul>
      </div>
    );
  }
);

FeatureCard.displayName = "FeatureCard";

// Main demo component with modern styling and enhanced visual effects
const VulnerabilityWorkflowDemo: React.FC<{ className?: string }> = ({
  className,
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const div1Ref = useRef<HTMLDivElement>(null);
  const div2Ref = useRef<HTMLDivElement>(null);
  const div3Ref = useRef<HTMLDivElement>(null);
  const div4Ref = useRef<HTMLDivElement>(null);
  const div5Ref = useRef<HTMLDivElement>(null);
  const shieldRef = useRef<HTMLDivElement>(null);
  const cardRef = useRef<HTMLDivElement>(null);
  const features = useMemo(
    () => [
      "Detailed vulnerability reports",
      "Risk-based prioritization",
      "Jira integration & export",
      "Real-time dashboard",
      "Asset discovery",
      "Remediation guidance",
      "Advanced analysis",
    ],
    []
  );

  return (
    <div
      className={cn(
        "relative flex w-full items-center justify-center overflow-hidden rounded-3xl bg-gradient-to-br from-white via-gray-50/50 to-blue-50/30 shadow-2xl",
        "min-h-[500px] p-6 sm:min-h-[600px] sm:p-8 lg:h-[600px] lg:p-12",
        "border border-gray-200/50 backdrop-blur-sm",
        // Modern gradient overlay
        "before:pointer-events-none before:absolute before:inset-0 before:rounded-3xl before:bg-gradient-to-br before:from-blue-500/5 before:via-transparent before:to-purple-500/5",
        className
      )}
      ref={containerRef}
    >
      <div className="relative z-10 flex size-full max-w-7xl flex-col items-center justify-between gap-8 sm:gap-12 lg:flex-row lg:items-stretch lg:justify-between lg:gap-[120px] xl:gap-[160px]">
        {/* Enhanced Input Sources with modern styling */}
        <div className="flex w-full flex-row justify-center gap-2 sm:gap-3 lg:w-auto lg:flex-col lg:justify-center lg:gap-6">
          <IconContainer
            ref={div1Ref}
            className="group h-20 w-20 border-gray-200/60 bg-white/80 backdrop-blur-md transition-all duration-500 hover:-translate-y-1 hover:border-blue-200 hover:bg-white hover:shadow-xl hover:shadow-blue-500/10 sm:h-24 sm:w-28 lg:h-24 lg:w-36"
          >
            <img
              src="/assets/shodan.svg"
              alt="Nessus"
              className="h-8 w-8 object-contain transition-transform duration-300 group-hover:scale-110 sm:h-10 sm:w-10 lg:h-full lg:w-full"
            />
          </IconContainer>
          <IconContainer
            ref={div2Ref}
            className="group h-20 w-20 border-gray-200/60 bg-white/80 backdrop-blur-md transition-all duration-500 hover:-translate-y-1 hover:border-purple-200 hover:bg-white hover:shadow-xl hover:shadow-purple-500/10 sm:h-24 sm:w-28 lg:h-24 lg:w-36"
          >
            <img
              src="/assets/qualys.svg"
              alt="Nmap"
              className="h-8 w-8 object-contain transition-transform duration-300 group-hover:scale-110 sm:h-10 sm:w-10 lg:h-full lg:w-full"
            />
          </IconContainer>
          <IconContainer
            ref={div3Ref}
            className="group h-20 w-20 border-gray-200/60 bg-white/80 backdrop-blur-md transition-all duration-500 hover:-translate-y-1 hover:border-indigo-200 hover:bg-white hover:shadow-xl hover:shadow-indigo-500/10 sm:h-24 sm:w-28 lg:h-24 lg:w-36"
          >
            <img
              src="/assets/wazuh.svg"
              alt="Wazuh"
              className="h-8 w-8 object-contain transition-transform duration-300 group-hover:scale-110 sm:h-10 sm:w-10 lg:h-full lg:w-full"
            />
          </IconContainer>
          <IconContainer
            ref={div4Ref}
            className="group h-20 w-20 border-gray-200/60 bg-white/80 backdrop-blur-md transition-all duration-500 hover:-translate-y-1 hover:border-emerald-200 hover:bg-white hover:shadow-xl hover:shadow-emerald-500/10 sm:h-24 sm:w-28 lg:h-24 lg:w-36"
          >
            <span className="text-center text-xs font-bold tracking-wide text-gray-800 sm:text-sm">
              Raw Data
            </span>
          </IconContainer>
          <IconContainer
            ref={div5Ref}
            className="group h-20 w-20 border-gray-200/60 bg-white/80 backdrop-blur-md transition-all duration-500 hover:-translate-y-1 hover:border-rose-200 hover:bg-white hover:shadow-xl hover:shadow-rose-500/10 sm:h-24 sm:w-28 lg:h-24 lg:w-36"
          >
            <div className="flex flex-col items-center">
              <span className="text-center text-xs font-bold tracking-wide text-gray-800 sm:text-sm">
                CSV, XML, PDF
              </span>
              <span className="mt-1 text-xs font-medium text-gray-500">
                +more
              </span>
            </div>
          </IconContainer>
        </div>

        {/* Enhanced Center Processing Logo with modern effects */}
        <div className="flex flex-col items-center justify-center">
          <div
            ref={shieldRef}
            className="hover:shadow-3xl group relative z-20 flex size-16 items-center justify-center rounded-2xl border border-blue-200/50 bg-gradient-to-br from-blue-50 to-purple-50 shadow-2xl shadow-blue-500/20 backdrop-blur-md transition-all duration-700 hover:scale-110 hover:shadow-blue-500/30 sm:size-20 lg:size-28"
          >
            {/* Animated background gradient */}
            <div className="absolute inset-0 animate-pulse rounded-2xl bg-gradient-to-br from-blue-500/10 via-purple-500/5 to-indigo-500/10"></div>

            {/* Glow effect */}
            <div className="absolute -inset-2 rounded-3xl bg-gradient-to-br from-blue-500/20 to-purple-500/20 opacity-0 blur-xl transition-opacity duration-500 group-hover:opacity-100"></div>

            <img
              src="/assets/kikimora_logo.png"
              alt="Kikimora Platform"
              className="relative z-10 h-full w-full object-contain transition-transform duration-500 group-hover:scale-105"
            />
          </div>
        </div>

        {/* Enhanced Output Section with modern card design */}
        <div className="flex w-full flex-col items-center justify-center text-center lg:w-auto">
          <div className="mb-6 max-w-sm sm:mb-8">
            <h3 className="bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 bg-clip-text text-xl font-bold text-gray-900 text-transparent sm:text-2xl lg:text-3xl">
              Unified Vulnerability Management
            </h3>
            <p className="mt-3 text-sm leading-relaxed text-gray-600 sm:mt-4 sm:text-base">
              Transform raw data into actionable insights with AI-powered
              analysis
            </p>
          </div>
          <FeatureCard ref={cardRef} features={features} />
        </div>
      </div>

      {/* Enhanced Desktop beams with modern gradient colors */}
      <div className="hidden lg:block">
        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={div1Ref}
          toRef={shieldRef}
          startXOffset={72}
          curvature={-25}
          endYOffset={-12}
          delay={0.3}
          gradientStartColor="#3B82F6"
          gradientStopColor="#8B5CF6"
          pathWidth={2.5}
        />
        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={div2Ref}
          toRef={shieldRef}
          startXOffset={72}
          curvature={-15}
          endYOffset={-8}
          delay={0.6}
          gradientStartColor="#8B5CF6"
          gradientStopColor="#EC4899"
          pathWidth={2.5}
        />
        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={div3Ref}
          toRef={shieldRef}
          startXOffset={72}
          delay={0.9}
          gradientStartColor="#6366F1"
          gradientStopColor="#3B82F6"
          pathWidth={2.5}
        />
        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={div4Ref}
          toRef={shieldRef}
          startXOffset={72}
          curvature={15}
          endYOffset={8}
          delay={1.2}
          gradientStartColor="#10B981"
          gradientStopColor="#3B82F6"
          pathWidth={2.5}
        />
        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={div5Ref}
          toRef={shieldRef}
          startXOffset={72}
          curvature={25}
          endYOffset={12}
          delay={1.5}
          gradientStartColor="#F59E0B"
          gradientStopColor="#EF4444"
          pathWidth={2.5}
        />

        <AnimatedBeam
          duration={6}
          containerRef={containerRef}
          fromRef={shieldRef}
          toRef={cardRef}
          startXOffset={56}
          endXOffset={-180}
          delay={1.8}
          curvature={5}
          endYOffset={-50}
          gradientStartColor="#8B5CF6"
          gradientStopColor="#3B82F6"
          pathWidth={3}
        />
      </div>

      {/* Enhanced Mobile beams */}
      <div className="block lg:hidden">
        {/* Input sources to center - with better positioning */}
        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={div1Ref}
          toRef={shieldRef}
          startYOffset={32}
          endYOffset={-12}
          curvature={-45}
          delay={0.4}
          pathWidth={3.5}
          gradientStartColor="#3B82F6"
          gradientStopColor="#8B5CF6"
        />
        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={div2Ref}
          toRef={shieldRef}
          startYOffset={32}
          endYOffset={-12}
          curvature={-25}
          delay={0.7}
          pathWidth={3.5}
          gradientStartColor="#8B5CF6"
          gradientStopColor="#EC4899"
        />
        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={div3Ref}
          toRef={shieldRef}
          startYOffset={32}
          endYOffset={-12}
          delay={1.0}
          pathWidth={3.5}
          gradientStartColor="#6366F1"
          gradientStopColor="#3B82F6"
        />
        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={div4Ref}
          toRef={shieldRef}
          startYOffset={32}
          endYOffset={-12}
          curvature={-30}
          delay={1.3}
          pathWidth={3.5}
          gradientStartColor="#10B981"
          gradientStopColor="#3B82F6"
        />
        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={div5Ref}
          toRef={shieldRef}
          startYOffset={32}
          endYOffset={-12}
          curvature={-45}
          delay={1.6}
          pathWidth={3.5}
          gradientStartColor="#F59E0B"
          gradientStopColor="#EF4444"
        />

        <AnimatedBeam
          duration={5}
          containerRef={containerRef}
          fromRef={shieldRef}
          toRef={cardRef}
          startYOffset={12}
          endYOffset={-120}
          delay={1.9}
          curvature={0}
          pathWidth={4}
          gradientStartColor="#8B5CF6"
          gradientStopColor="#3B82F6"
        />
      </div>
    </div>
  );
};

// Main export component
export const VulnerabilityManagementDemo: React.FC = () => {
  return (
    <>
      {/* Sleek divider section with white background */}
      <div className="relative bg-white py-24">
        {/* Gradient line */}
        <div className="absolute inset-x-0 top-1/2 h-px bg-gradient-to-r from-transparent via-cyan-500/50 to-transparent" />

        {/* Central glow effect */}
        <div className="absolute inset-x-0 top-1/2 -translate-y-1/2">
          <div className="mx-auto h-1 w-64 bg-gradient-to-r from-cyan-400/20 via-cyan-500/60 to-cyan-400/20 blur-sm" />
        </div>
      </div>

      <section className="bg-white px-6 py-16">
        <div className="container mx-auto max-w-7xl">
          <div className="mb-12 text-center">
            <h2 className="mb-4 text-3xl font-bold text-gray-900 md:text-4xl">
              Vulnerability Management Workflow
            </h2>
            <p className="mx-auto max-w-3xl text-lg text-gray-600">
              Streamline your security operations with our unified vulnerability
              management platform
            </p>
          </div>

          <div className="flex min-h-[600px] w-full items-center justify-center p-4">
            <VulnerabilityWorkflowDemo />
          </div>
        </div>
      </section>
    </>
  );
};
