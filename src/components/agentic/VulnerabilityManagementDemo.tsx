import React, { forwardRef, useRef, useEffect, useId, useState } from "react";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";

// This is the AnimatedBeam component
const AnimatedBeam = ({
  className = "",
  containerRef,
  fromRef,
  toRef,
  curvature = 0,
  reverse = false,
  duration = 5,
  delay = 0,
  pathColor = "gray",
  pathWidth = 2,
  pathOpacity = 0.2,
  gradientStartColor = "#ffaa40",
  gradientStopColor = "#9c40ff",
  startXOffset = 0,
  startYOffset = 0,
  endXOffset = 0,
  endYOffset = 0,
}: {
  className?: string;
  containerRef: React.RefObject<HTMLDivElement>;
  fromRef: React.RefObject<HTMLDivElement>;
  toRef: React.RefObject<HTMLDivElement>;
  curvature?: number;
  reverse?: boolean;
  duration?: number;
  delay?: number;
  pathColor?: string;
  pathWidth?: number;
  pathOpacity?: number;
  gradientStartColor?: string;
  gradientStopColor?: string;
  startXOffset?: number;
  startYOffset?: number;
  endXOffset?: number;
  endYOffset?: number;
}) => {
  const id = useId();
  const [pathD, setPathD] = useState("");
  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });

  useEffect(() => {
    const updatePath = () => {
      if (containerRef.current && fromRef.current && toRef.current) {
        const containerRect = containerRef.current.getBoundingClientRect();
        const rectA = fromRef.current.getBoundingClientRect();
        const rectB = toRef.current.getBoundingClientRect();

        const svgWidth = containerRect.width;
        const svgHeight = containerRect.height;
        setSvgDimensions({ width: svgWidth, height: svgHeight });

        const startX =
          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;
        const startY =
          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;
        const endX =
          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;
        const endY =
          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;

        const controlPointX = (startX + endX) / 2;
        const controlPointY = startY - curvature;

        const d = `M ${startX},${startY} Q ${controlPointX},${controlPointY} ${endX},${endY}`;
        setPathD(d);
      }
    };

    updatePath();

    const resizeObserver = new ResizeObserver(updatePath);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }
    window.addEventListener("resize", updatePath);

    return () => {
      if (containerRef.current) {
        resizeObserver.unobserve(containerRef.current);
      }
      window.removeEventListener("resize", updatePath);
    };
  }, [
    containerRef,
    fromRef,
    toRef,
    curvature,
    startXOffset,
    startYOffset,
    endXOffset,
    endYOffset,
  ]);

  const gradientCoordinates = reverse
    ? { x1: ["90%", "-10%"], x2: ["100%", "0%"] }
    : { x1: ["10%", "110%"], x2: ["0%", "100%"] };

  return (
    <svg
      fill="none"
      width={svgDimensions.width}
      height={svgDimensions.height}
      xmlns="http://www.w3.org/2000/svg"
      className={cn("pointer-events-none absolute left-0 top-0", className)}
      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}
    >
      <path
        d={pathD}
        stroke={pathColor}
        strokeWidth={pathWidth}
        strokeOpacity={pathOpacity}
        strokeLinecap="round"
      />
      <path
        d={pathD}
        strokeWidth={pathWidth}
        stroke={`url(#${id})`}
        strokeOpacity="1"
        strokeLinecap="round"
      />
      <defs>
        <motion.linearGradient
          id={id}
          className="transform-gpu"
          gradientUnits="userSpaceOnUse"
          initial={{ x1: "0%", x2: "0%" }}
          animate={{ x1: gradientCoordinates.x1, x2: gradientCoordinates.x2 }}
          transition={{
            delay,
            duration,
            ease: [0.16, 1, 0.3, 1],
            repeat: Infinity,
            repeatDelay: 0,
          }}
        >
          <stop stopColor={gradientStartColor} stopOpacity="0"></stop>
          <stop stopColor={gradientStartColor}></stop>
          <stop offset="32.5%" stopColor={gradientStopColor}></stop>
          <stop
            offset="100%"
            stopColor={gradientStopColor}
            stopOpacity="0"
          ></stop>
        </motion.linearGradient>
      </defs>
    </svg>
  );
};

// Reusable container for the icons on the left
const IconContainer = forwardRef<
  HTMLDivElement,
  { className?: string; children?: React.ReactNode }
>(({ className, children }, ref) => {
  return (
    <div
      ref={ref}
      className={cn(
        "z-10 flex h-20 w-32 items-center justify-center rounded-lg border-2 border-border bg-background p-3 shadow-lg",
        className
      )}
    >
      {children}
    </div>
  );
});
IconContainer.displayName = "IconContainer";

// Reusable list item for the card on the right
const ListItem = ({ text }: { text: string }) => {
  return (
    <li className="flex items-start text-sm text-muted-foreground">
      <span className="mr-2.5 mt-0.5 flex-shrink-0 text-blue-500">
        <svg
          width={20}
          height={20}
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M18 9.5L11.5312 2.9375C11.25 2.65625 10.8125 2.65625 10.5312 2.9375C10.25 3.21875 10.25 3.65625 10.5312 3.9375L15.7812 9.28125H2.5C2.125 9.28125 1.8125 9.59375 1.8125 9.96875C1.8125 10.3438 2.125 10.6875 2.5 10.6875H15.8437L10.5312 16.0938C10.25 16.375 10.25 16.8125 10.5312 17.0938C10.6562 17.2188 10.8437 17.2812 11.0312 17.2812C11.2187 17.2812 11.4062 17.2188 11.5312 17.0625L18 10.5C18.2812 10.2187 18.2812 9.78125 18 9.5Z"
            fill="currentColor"
          />
        </svg>
      </span>
      {text}
    </li>
  );
};
// The card component on the right
const FeatureCard = forwardRef<HTMLDivElement, { children?: React.ReactNode }>(
  (_, ref) => {
    const features = [
      "HTML and PDF reports",
      "Risk-based vulnerability prioritization",
      "Jira issue export",
      "Centralized vulnerability dashboard",
      "Automated vulnerability discovery",
      "Remediation guidance",
      "Trend and historical analysis",
    ];

    return (
      <div
        ref={ref}
        className="z-10 w-full max-w-xs rounded-lg border border-border bg-background p-4 shadow-lg"
      >
        <ul className="flex flex-col space-y-2">
          {features.map((feature, index) => (
            <ListItem key={index} text={feature} />
          ))}
        </ul>
      </div>
    );
  }
);
FeatureCard.displayName = "FeatureCard";

// The main component that lays out the entire visualization
function FinalBeamDemo({ className }: { className?: string }) {
  const containerRef = useRef(null);
  const div1Ref = useRef(null);
  const div2Ref = useRef(null);
  const div3Ref = useRef(null);
  const div4Ref = useRef(null);
  const div5Ref = useRef(null);
  const shieldRef = useRef(null);
  const cardRef = useRef(null);

  return (
    <div
      className={cn(
        "relative flex h-[600px] w-full items-center justify-center overflow-hidden rounded-lg p-10 md:shadow-xl bg-gradient-to-br from-background via-background to-muted/20",
        className
      )}
      ref={containerRef}
    >
      <div className="flex size-full max-w-4xl flex-row items-stretch justify-between gap-[140px]">
        {/* Left Column */}
        <div className="flex flex-col justify-center gap-4">
          <IconContainer ref={div1Ref}>
            <img
              src="https://res.cloudinary.com/dgbyqvq2k/image/upload/v1753805233/3_st6upv.svg"
              alt="Logo 1"
              className="w-full h-full object-contain p-2"
            />
          </IconContainer>
          <IconContainer ref={div2Ref}>
            <img
              src="https://res.cloudinary.com/dgbyqvq2k/image/upload/v1753805233/1_njeubg.svg"
              alt="Logo 2"
              className="w-full h-full object-contain p-2"
            />
          </IconContainer>
          <IconContainer ref={div3Ref}>
            <img
              src="https://res.cloudinary.com/dgbyqvq2k/image/upload/v1753805613/Wazuh_correct_eydeuz.svg"
              alt="Logo 3"
              className="w-full h-full object-contain p-2"
            />
          </IconContainer>
          <IconContainer ref={div4Ref}>
            <span className="text-foreground text-sm font-semibold text-center">
              Raw Data
            </span>
          </IconContainer>
          <IconContainer ref={div5Ref}>
            <div className="flex flex-col items-center">
              <span className="text-foreground text-sm font-semibold text-center">
                JPG, PNG, PDF
              </span>
              <span className="text-muted-foreground text-xs mt-1">+ more</span>
            </div>
          </IconContainer>
        </div>

        {/* Center Column */}
        <div className="flex flex-col justify-center items-center">
          <div
            ref={shieldRef}
            className="z-10 flex items-center justify-center size-24"
          >
            <img
              src="https://res.cloudinary.com/dgbyqvq2k/image/upload/v1753350218/colorAndBlack_xhofkc.png"
              alt="Custom Logo"
              className="w-full h-full object-contain"
            />
          </div>
        </div>

        {/* Right Column */}
        <div className="flex flex-col justify-center items-center text-center">
          <div className="mb-4 max-w-sm">
            <h2 className="text-lg font-bold text-foreground">
              Accessible Security Intelligence
            </h2>
            <p className="text-sm text-muted-foreground mt-2">
              Delivering a robust, scalable platform for proactive AI-powered
              vulnerability management
            </p>
          </div>
          <FeatureCard ref={cardRef} />
        </div>
      </div>

      {/* Beams from left icons to the central shield */}
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={div1Ref}
        toRef={shieldRef}
        startXOffset={64}
        curvature={-20}
        endYOffset={-10}
        delay={0.2}
      />
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={div2Ref}
        toRef={shieldRef}
        startXOffset={64}
        curvature={-20}
        endYOffset={-10}
        delay={0.4}
      />
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={div3Ref}
        toRef={shieldRef}
        startXOffset={64}
        delay={0.6}
      />
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={div4Ref}
        toRef={shieldRef}
        startXOffset={64}
        curvature={20}
        endYOffset={10}
        delay={0.8}
      />
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={div5Ref}
        toRef={shieldRef}
        startXOffset={64}
        curvature={20}
        endYOffset={10}
        delay={1.0}
      />

      {/* Beam from the shield to the right card */}
      <AnimatedBeam
        duration={5}
        containerRef={containerRef}
        fromRef={shieldRef}
        toRef={cardRef}
        startXOffset={48}
        endXOffset={-160}
        delay={1.2}
        curvature={0}
        endYOffset={-40}
      />
    </div>
  );
}

export function VulnerabilityManagementDemo() {
  return (
    <section className="py-16 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-4">
            Vulnerability Management Workflow
          </h2>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            See how our platform integrates with your existing security tools to
            create a seamless vulnerability management process.
          </p>
        </div>

        <div className="flex items-center justify-center min-h-[600px] w-[75vw] p-4 mx-auto">
          <FinalBeamDemo />
        </div>
      </div>
    </section>
  );
}
